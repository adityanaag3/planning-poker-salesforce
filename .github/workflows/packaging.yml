# Unique name for this workflow
name: Packaging

# Definition when the workflow should run
on:
    release:
        types: [released]

# Jobs to be executed
jobs:
    packaging:
        runs-on: ubuntu-latest
        steps:
            # Install Salesforce CLI
            - name: Install Salesforce CLI
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                  mkdir sfdx-cli
                  tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                  ./sfdx-cli/install

            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

            # Remove auth file
            - name: Remove auth file
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Store secret for Developer Edition Org
            - name: 'Populate auth file with DEV_ED_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEV_ED_SFDX_URL}} > ./DEV_ED_SFDX_URL.txt'

            # Authenticate Developer Edition Org
            - name: 'Authenticate Dev Hub'
              run: 'sfdx force:auth:sfdxurl:store -f ./DEV_ED_SFDX_URL.txt -a ppoker'

            # Remove auth file
            - name: Remove auth file
              run: rm -f ./DEV_ED_SFDX_URL.txt

            # Add namespace to project config
            - name: Add namespace to project config
              run: |
                  sed -i 's,"namespace": "","namespace": "planningpokersf",' sfdx-project.json

            # Update release number in sfdx-project.json
            - name: Update Package number in sfdx-project.json
              run: |
                  versionNumber="${{ github.event.release.tag_name }}"
                  versionName="${{ github.event.release.name }}"

                  versionNameRegex="\"versionName\": \".*\""
                  versionNumberRegex="\"versionNumber\": \"([0-9]+)\.([0-9]+)\.([0-9]+)\.NEXT\""

                  newVersionName="\"versionName\": \"${versionName}\""
                  newVersionNumber="\"versionNumber\": \"${versionNumber/v/}.NEXT\""

                  sed -i 's,versionNameRegex,newVersionName,' sfdx-project.json
                  sed -i 's,versionNumberRegex,newVersionNumber,' sfdx-project.json

            # Create package version and extract its id
            - name: Create package version
              id: create-package-version
              run: |
                  set +e
                  json=$(sfdx force:package:version:create -c -p "Planning Poker Salesforce" -x -w 20 -f config/project-scratch-def.json --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Install new package in developer org
            - name: Install new package version in scratch org
              run: sfdx force:package:install --package ${{ steps.create-package-version.outputs.packageVersionId }} -w 10 -b 10 -u ppoker -r

            # Update package install link in readme
            - name: Update package install link in readme
              run: |
                  packageVersionId="${{ steps.create-package-version.outputs.packageVersionId }}"
                  packageLinkRegex="?p0=[a-zA-Z0-9]{18}"
                  newPackageLink="?p0=${packageVersionId}"
                  sed -E -i "s,${packageLinkRegex},${newPackageLink},g" README.md

            # Update sfdx-project.json and README to use only latest package version
            - name: 'Update sfdx-project.json and README'
              uses: muenzpraeger/github-action-sfdx-packaging-updater@master

            # Remove namespace from project config
            - name: Remove namespace from project config
              run: |
                  sed -i 's,"namespace": "planningpokersf","namespace": "",' sfdx-project.json

            # Commit project config and readme
            - name: Commit project config and readme
              run: |
                  versionNumber="${{ github.event.release.tag_name }}"
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add sfdx-project.json
                  git add README.md
                  git commit -m "Released Version ${versionNumber}"

            # Push changes in git
            - name: Push changes in git
              uses: ad-m/github-push-action@master
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
